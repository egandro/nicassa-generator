////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Retrofit Configuration
////////////////////////////////////////////////////////////////////

package <%- namespace%>;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import retrofit2.Retrofit;
import retrofit2.converter.jackson.JacksonConverterFactory;
import retrofit2.converter.scalars.ScalarsConverterFactory;

public class Configuration {
    public static Retrofit getConnection(String baseUrl, HashMap<String, String> headers) {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();

        addHeaders(builder, headers);
        OkHttpClient client = builder.build();

        Retrofit result = new Retrofit.Builder()
                .addConverterFactory(ScalarsConverterFactory.create())
                .addConverterFactory(JacksonConverterFactory.create()).client(client)
                .baseUrl(baseUrl)
                .build();
        return result;
    }

    public static Retrofit getConnection(String baseUrl, int timeout, HashMap<String, String> headers) {
        return getConnection(baseUrl, timeout, timeout, headers);
    }

    public static void addHeaders(OkHttpClient.Builder builder, HashMap<String, String> customHeaders) {
        final HashMap<String, String> headers = new HashMap<>();

        headers.put("Content-Type", "application/json");
        headers.put("Accept", "application/json");
        headers.put("Accept-Encoding", "gzip, deflate, compress");

        if(customHeaders != null && customHeaders.size() >0) {
            for (Map.Entry<String, String> entry : customHeaders.entrySet()) {
                String key = entry.getKey();
                if(key == null) {
                    continue;
                }
                String value = entry.getValue();
                if(value == null) {
                    value = "";
                }
                if(headers.containsKey(key)) {
                    headers.remove(key);
                }
                headers.put(key, value);
            }
        }

        builder.networkInterceptors().add(new Interceptor() {
            @Override
            public Response intercept(Chain chain) throws IOException {
                final Request.Builder builder = chain.request().newBuilder();
                for (Map.Entry<String, String> entry : headers.entrySet()) {
                    String key = entry.getKey();
                    String value = entry.getValue();
                    builder.addHeader(key, value);
                }
                final Request request = builder.build();
                return chain.proceed(request);
            }
        });
    }

    public static Retrofit getConnection(String baseUrl, int connectTimeout, int readWriteTimeout,
                                         HashMap<String, String> headers) {

        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        builder.connectTimeout(connectTimeout, TimeUnit.SECONDS)
               .writeTimeout(readWriteTimeout, TimeUnit.SECONDS)
               .readTimeout(readWriteTimeout, TimeUnit.SECONDS);

        addHeaders(builder, headers);
        OkHttpClient client = builder.build();

        Retrofit result = new Retrofit.Builder()
                .addConverterFactory(ScalarsConverterFactory.create())
                .addConverterFactory(JacksonConverterFactory.create())
                .client(client)
                .baseUrl(baseUrl)
                .build();

        return result;
    }
}
