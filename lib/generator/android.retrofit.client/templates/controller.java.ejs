////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Retrofit Controller
////////////////////////////////////////////////////////////////////

package <%- namespace%>;

import retrofit2.http.*;
import retrofit2.Call;
import <%- namespaceDto%>.*;

public interface <%- controller.name%> {
<%
controller.routes.forEach(function(method){
    var resultType = 'Void';
    if(method.response.length>0) {
        var response = method.response[0];
        var req =  response.isRequired;
        if(req && response.isArray) {
            req = false; // we need the nullable types for array
        }
        resultType = response.getMappedType('Java', req);
        if(response.isArray) {
            resultType = "java.util.List<" + resultType + ">";
        }
        if(response.isMap) {
            resultType = "java.util.HashMap<String, " + resultType + ">";
        }
    }
%>
    @<%- method.verb.toUpperCase()%>("<%- method.pathNoSlash()%>")
    Call<<%- resultType%>> <%- method.operationId%> (<%
        var p=0;
        method.parameter.forEach(function(param){
        var req =  param.isRequired;
        if(req && param.isArray) {
            req = false; // we need the nullable types for array
        }
        var paramType=param.getMappedType('Java', req);
        if(param.isArray) {
            paramType = "java.util.List<" + paramType + ">";
        }
        if(param.isMap) {
            paramType = "java.util.Map<String, " + paramType + ">";
        }

        var decorator = '';
        switch(param.in.toLowerCase()) {
            case 'body':
                decorator = '@Body';
                break;
            case 'path':
                decorator = '@Path("' + param.name + '")';
                break;
            case 'header':
                decorator = '@Header("' + param.name + '")';
                break;
            case 'query':
                decorator = '@Query("' + param.name + '")';
                break;
            default:
                console.log('unknown parameter IN type', param.in);
        }


%><%- decorator%> <%- param.getMappedType('Java', param.isRequired)
    %> <%- param.name%><%
    if(p+1<method.parameter.length) {%>,
        <%}%><%p++;});%>)%>;
<%});%>
}
