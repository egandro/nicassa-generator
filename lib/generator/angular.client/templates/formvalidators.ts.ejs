/* tslint:disable:max-line-length */
////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

import { Validators } from '@angular/forms';

export class <%- ngModuleName%>Validators {
    private static definitions = {
<%complexTypes.forEach(function(type){
%><%if(type.type !== type.name) {
%>// mapped from <%- type.name %>
<%}%>        <%- type.type%>: {<%
type.properties.forEach(function(prop){%><%
    if(prop.isMap) {%>
     // warning map is not supported<%
    } else {%>
            <%- prop.name%>: [''<%if(prop.getMappedType('AngularFormValidator')) {
            %>, <%- prop.getMappedType('AngularFormValidator') %><%}%><%}%>],<%
}); %>
        },
<%}); %>
    };

    public static getForm(entity: string): any {
        if (ChemEasyAngularServiceValidators.definitions.hasOwnProperty(entity)) {
            return ChemEasyAngularServiceValidators.definitions[entity];
        }
        return {};
    }

    public static getColumnValidator(entity: string, column: string): any {
        let result: any = Validators.compose(<any>(null));

        if (!ChemEasyAngularServiceValidators.definitions.hasOwnProperty(entity)) {
            return result;
        }

        const data = ChemEasyAngularServiceValidators.definitions[entity];
        if (!data.hasOwnProperty(column)) {
            return result;
        } else {
            result = data[column][1];
        }

        return result;
    }
}
