/* tslint:disable:max-line-length */
////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

import { Validators } from '@angular/forms';

export class <%- ngModuleName%>Validators {
    private static definitions = {
<%complexTypes.forEach(function(type){
%><%if(type.type !== type.name) {
%>// mapped from <%- type.name %>
<%}%>        <%- type.type%>: {<%
type.properties.forEach(function(prop){%><%
    if(prop.isMap) {%>
     // warning map is not supported<%
    } else {%>
            <%- prop.name%>: [''<%if(prop.getMappedType('AngularFormValidator')) {
            %>, <%- prop.getMappedType('AngularFormValidator') %><%}%><%}%>],<%
}); %>
        },
<%}); %>
    };

    public static getForm(entity: string): any {
        const result = {};
        if (<%- ngModuleName%>Validators.definitions.hasOwnProperty(entity)) {
            const data = <%- ngModuleName%>Validators.definitions[entity];
            Object.keys(data).forEach((key) => {
                const item = data[key];
                let validator: any = null;
                if (item.length > 1) {
                    const validators = item[1];
                    if (validators.length === 1) {
                        validator = validators[0];
                    } else {
                        validator = Validators.compose(validators);
                    }
                }
                result[key] = [];
                result[key].push(item[0]);
                if (validator) {
                    result[key].push(validator);
                }
            });
        }
        return result;
    }

    public static getColumnValidator(entity: string, column: string, ...customValidators: any[]): any {
        let result: any = Validators.compose(<any>(null));

        if (!<%- ngModuleName%>Validators.definitions.hasOwnProperty(entity)) {
            return result;
        }

        const data = <%- ngModuleName%>Validators.definitions[entity];
        if (!data.hasOwnProperty(column)) {
            return result;
        }

        if (data[column].length < 2) {
            return result;
        }

        result = data[column][1];
        if (customValidators) {
            for (const validator of customValidators) {
                result.push(validator);
            }
        }

        if (result.length > 1) {
            result.push(Validators.compose(result));
        }

        return result;
    }
}
