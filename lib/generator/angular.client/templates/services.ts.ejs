/* tslint:disable:max-line-length */
////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import { Injectable } from '@angular/core';
import { Http, Response, Headers } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { Configuration } from './configuration';
import { ErrorReporter } from './errorreporter';


import {<%
complexTypes.forEach(function(type){%>
    <%- type.type%>,<%}
);%>
} from './entities';
<%controllers.forEach(function(ctrl){
    let needbuildPath = false;
    let needbuildQuery = false;%>
@Injectable()
export class <%- ctrl.name%>Service {
    private actionUrl: string;
    private headers: Headers;

    constructor(private _http: Http,
                private _configuration: Configuration,
                private _errorreporter: ErrorReporter) {
        this.actionUrl = this._configuration.url() + '<%- ctrl.path%>';
        this.headers = new Headers();
        this.headers.append('Content-Type', 'application/json');
        this.headers.append('Accept', 'application/json');
    }

<%
ctrl.routes.forEach(function(method){%>
    public <%- method.operationId%> = (<%
        var p=0;
        method.parameter.forEach(function(param){

%><%- param.name%><%
    if(param.isMap) {%>
    [key: string]<%
    } else{ if(!param.isRequired) {
        %>?<%}%><%}
    %>: <%- param.getMappedType('TypeScript')
    %><%if(param.isArray) {%>[]<%}%><%
    if(p+1<method.parameter.length) {%>,
        <%}%><%p++;});%>): Observable<<%
        if(method.response.length>0) {
            var response = method.response[0];%><%-
                response.getMappedType('TypeScript')%><%if(response.isArray) {%>[]<%}
    %><%} else {%>void<%}%>> => {<%
    if(method.response.length>1) {%>
        /* warning <%- method.response.length %> response types found -
           currently only using the very first one
           idea: return a <%- ctrl.name%>Service_<%- method.operationId%>_Type { [key: string] :  typeA | typeB | typeC }

           This currently may leads to non compilable code, because unused types are referenced...
         */<%
    }%><%if( ['post', 'put', 'patch'].indexOf(method.verb)>-1) {
            var param = method.getBodyParameter();
            var body = '';
            if(param != null) { body = param.name; } %>
        let body: any = <%- body; %>;<%}
        if(method.hasParameterType('path')) {
        %>
        var url = this.actionUrl + this.__buildPath('<%- method.path%>'<%
            var buildPathParams = '';
            method.parameter.forEach(function(pathParam){
                if(pathParam.in == 'path') {
                    buildPathParams += ', \'' + pathParam.name + '\'';
                    buildPathParams += ', ' + pathParam.name;
                    needbuildPath = true;
                }
            });
            if(buildPathParams !='') {%><%- buildPathParams; %><%}
%>);<%} else {%>
        var url = this.actionUrl + '<%- method.path%>';<%}%><%
        if(method.hasParameterType('query')) {%>
        url = this.__buildQuery(url<%
            var buildQueryParams = '';
            method.parameter.forEach(function(queryParam){
                if(queryParam.in == 'query') {
                    buildQueryParams += ', \'' + queryParam.name + '\'';
                    buildQueryParams += ', ' + queryParam.name;
                    needbuildQuery = true;
                }
            });
            %><%- buildQueryParams; %>);
%><%}%>
    }

<%});%><%if(needbuildQuery) {%>
    private __buildQuery(url: any, ...params: any[]): string {
        if( param === undefined || param === null || params.length == 0) {
            return url;
        }


        throw 'not implemented to copy paste later';

        for (var i = 0; i <  params.length; i+=2) {
            sum += params[i];
        }



        return encodeURI(param);
    }<%
}%><%if(needbuildPath) {%>
    private __buildPath(url: any, ...params: any[]): string {
        if( param === undefined || param === null || params.length == 0) {
            return url;
        }


        throw 'not implemented to copy paste later';

        for (var i = 0; i <  params.length; i+=2) {
            sum += params[i];
        }



        return encodeURI(param);
    }<%
}%>

}
<%});%>
