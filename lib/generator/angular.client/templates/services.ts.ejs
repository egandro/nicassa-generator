/* tslint:disable:max-line-length */
////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';
import { Injectable } from '@angular/core';
import { Http, Response, Headers, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { Configuration } from './configuration';
import { ErrorReporter } from './errorreporter';


import {<%
complexTypes.forEach(function(type){%>
    <%- type.type%>,<%}
);%>
} from './entities';
<%controllers.forEach(function(ctrl){
    let needbuildPath = false;
    let needbuildQuery = false;%>
@Injectable()
export class <%- ctrl.name%>Service {
    constructor(private __http: Http,
                private __errorreporter: ErrorReporter) {
    }

    private actionUrl(): string {
        return Configuration.url + '<%- ctrl.path%>';
    }

    private createHeaders(): Headers {
        const headers: Headers = new Headers();
        headers.append('Content-Type', 'application/json');
        headers.append('Accept', 'application/json');
        // headers.append('Accept-Encoding', 'gzip, deflate, compress');

        if(Configuration.customHeaders != null ||
           Configuration.customHeaders !== undefined) {
            for (const key in Configuration.customHeaders) {
                if (Configuration.customHeaders.hasOwnProperty(key)) {
                    let value: string = Configuration.customHeaders[key];
                    if(value == null || value === undefined) {
                        value = encodeURI(value);
                    }
                    headers.append(key, value);
                }
            }
        }

        return headers;
    }
<%
ctrl.routes.forEach(function(method){%>
    public <%- method.operationId%> = (<%
        var p=0;
        var needBody = false;
        var body = '\'\'';
        var resultType = '';
        var resultTypeHttp = '';
        var resultTypeIsPrimitive = true;
        method.parameter.forEach(function(param){

%><%- param.name%><%
    if(param.isMap) {%>
    [key: string]<%
    } else{ if(!param.isRequired) {
        %>?<%}%><%}
    %>: <%- param.getMappedType('TypeScript')
    %><%if(param.isArray) {%>[]<%}%><%
    if(p+1<method.parameter.length) {%>,
        <%}%><%p++;});%>): Observable<<%
        resultType = 'void';
        resultTypeHttp = 'any';
        if(method.response.length>0) {
            var response = method.response[0];
            resultType = response.getMappedType('TypeScript');
            resultTypeIsPrimitive = response.isPrimitive;
            if(response.isArray) {
                resultType += "[]";
            }
            resultTypeHttp = resultType;
        }
    %><%- resultType %>> => {
        const _headers: Headers = this.createHeaders();<%
    if(method.response.length>1) {%>
        /* warning <%- method.response.length %> response types found -
           currently only using the very first one
           idea: return a <%- ctrl.name%>Service_<%- method.operationId%>_Type { [key: string] :  typeA | typeB | typeC }

           This currently may leads to non compilable code, because unused types are referenced...
         */<%
    }%><%if( ['post', 'put', 'patch'].indexOf(method.verb)>-1) {
            var param = method.getBodyParameter();
            needBody = true;
            if(param != null) { body = param.name; } %>
        const _body: any = <%- body; %>;<%}
if(method.hasParameterType('path')) {
        %>
        const __url = this.actionUrl() + this.__buildPath('<%- method.pathNoSlash()%>'<%
            var buildPathParams = '';
            method.parameter.forEach(function(pathParam){
                if(pathParam.in == 'path') {
                    buildPathParams += ', \'' + pathParam.name + '\'';
                    buildPathParams += ', ' + pathParam.name;
                    needbuildPath = true;
                }
            });
            if(buildPathParams !='') {%><%- buildPathParams; %><%}
%>);<%} else {%>
        const __url = this.actionUrl() + '<%- method.pathNoSlash()%>';<%
}%><%
        if(method.hasParameterType('query')) {%>
        url = this.__buildQuery(url<%
            var buildQueryParams = '';
            method.parameter.forEach(function(queryParam){
                if(queryParam.in == 'query') {
                    buildQueryParams += ', \'' + queryParam.name + '\'';
                    buildQueryParams += ', ' + queryParam.name;
                    needbuildQuery = true;
                }
            });
            %><%- buildQueryParams; %>);%><%
}%><%
        if(method.hasParameterType('header')) {
            method.parameter.forEach(function(headerParam){
                if(headerParam.in == 'header') {%>
        _headers.append('<%- headerParam.name%>', <%- headerParam.name%> ? encodeURI(<%- headerParam.name%>) : '');
<%}});%><%
}%><%   if(method.security == 'jwt') {%>
        _headers.append('x-access-token', Configuration.token);
%><%
}%>
        return this.__http.<%- method.verb%>(__url<%if(needBody) {%>, _body<%}%>, { headers: _headers } )
            .map((response: Response) => <<%- resultTypeHttp %>> ( <%
                    if(resultTypeIsPrimitive){
                        %><any>response.json()<%
                    } else {
                        %>response.json()<%}%> ))
            .catch((error: Response) => this.__errorreporter.handleError(error));
    }

<%});%><%if(needbuildQuery) {%>
    private __buildQuery(url: any, ...params: any[]): string {
        if (params === undefined || params === null || params.length === 0) {
            return url;
        }
        let delimiter = '?';
        for (let i = 0; i < params.length; i += 2) {
            const key: string = params[i];
            let value: any = params[i+1];

            key = encodeURI(key);

            if(value == null || value === undefined) {
                value = '';
            }
            value = encodeURI(value);

            url += delimter + key + '=' + value;

            const arr = url.split('{' + key + '}');
            url = arr[0] + value + arr[1];

            delimiter = '&';
        }
        return url;
    }<%
}%><%if(needbuildPath) {%>

    private __buildPath(url: any, ...params: any[]): string {
        if (params === undefined || params === null || params.length === 0) {
            return url;
        }
        for (let i = 0; i < params.length; i += 2) {
            const key: string = params[i];
            let value: any = params[i + 1];

            if (value == null || value === undefined) {
                value = '';
            }
            value = encodeURI(value);

            const arr = url.split('{' + key + '}');
            url = arr[0] + value + arr[1];
        }
        return url;
    }<%
}%>

}
<%});%>
