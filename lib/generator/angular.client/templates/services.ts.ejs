/* tslint:disable:max-line-length */
////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import { Injectable } from '@angular/core';
import { Http, Response, Headers } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { Configuration } from './configuration';
import { ErrorReporter } from './errorreporter';


import {<%
complexTypes.forEach(function(type){%>
    <%- type.name%>,<%}
);%>
} from './entities';
<%controllers.forEach(function(ctrl){
    var needEncodeURI = false;%>
@Injectable()
export class <%- ctrl.name%>Service {
    private actionUrl: string;
    private headers: Headers;

    constructor(private _http: Http,
                private _configuration: Configuration,
                private _errorreporter: ErrorReporter) {
        this.actionUrl = this._configuration.url() + '<%- ctrl.path%>';
        this.headers = new Headers();
        this.headers.append('Content-Type', 'application/json');
        this.headers.append('Accept', 'application/json');
    }
<% ctrl.methods.forEach(function(method){
%>
    public <%- method.name%> = (<%
        var p=0;
        method.parameters.forEach(function(param){
            if((method.getPath("Client").indexOf("urlEncode")) >-1) {
                needEncodeURI = true;
            }
%><%- param.name%>: <%- param.type.name%><%
    if(p+1<method.parameters.length) {%>, <%
}%><%p++;});%>): Observable<<%if(method.type.isArray) {%><%- method.type.elementType.name%>[]<%} else {%><%- method.type.name%><%}%>> => {<%
        if(method.needsBody()) {%>
        let body: any = '';<%if(
            method.bodyParamName) {%>
        body = <%- method.bodyParamName%>;<%}%>
<%}%>
        return this._http.<%- method.method%>(this.actionUrl + '<%- method.getPath("Client")%>'<%if(method.needsBody()) {%>, body<%}%>)
            .map((response: Response) => <<%if(method.type.isArray) {%><%- method.type.elementType.name%>[]<%} else {%><%- method.type.name%><%}
                    %>><any>(response<%
                    if(method.type.isPrimitive){
                        %>.text()<%
                    }else{
                        %>.json()<%}%>))
            .catch((error: Response) => this._errorreporter.handleError(error));
    }
<%});%><%if(needEncodeURI) {%>
    private urlEncode(param: any): string {
        if( param === undefined || param === null) {
            return '';
        }
        return encodeURI(param);
    }<%
}%>
}
<%});%>
