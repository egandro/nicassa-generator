/* tslint:disable:max-line-length */
////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

<%controllers.forEach(function(ctrl){%>
import { <%- ctrl.name%> } from '<%- ctrl.getMappedLocation()%>';<%
}); %>

const models: any = {
<%referenceTypes.forEach(function(refType){
%>    '<%- refType.name%>': {<%refType.properties.forEach(function(prop){%>
        '<%- prop.name%>': { typeName: '<%- prop.type.name%>', required: <%- prop.required%>, length: <%- prop.length%> },<%
}); %>
    },
<%
}); %>
};

export function RegisterRoutes(app: any) {
<%controllers.forEach(function(ctrl){%><%
  ctrl.methods.forEach(function(method){
%>    app.<%- method.method%>('/<%- ctrl.path%><%- method.getPath("Server")%>', (req: any, res: any, next: any) => {
        const params = {<%
  method.parameters.forEach(function(param){
%>
            '<%- param.name%>': { typeName: '<%- param.type.name%>', required: <%- param.required%> <%if(param.type.isArray) {%>arrayType: '<%- param.type.elementType.name%>' <%}%>},<%
}); %>
        };

        let validatedParams: any[] = [];
        try {
            validatedParams = getValidatedParams(params, req, '<%- method.bodyParamName%>');
        } catch (err) {
            //res.status(err.status || 500);
            //res.json(err);
            next(err);
            return;
        }

        const controller = new <%- ctrl.name%>();
        promiseHandler(controller.<%- method.name%>.apply(controller, validatedParams), res, next);
    });
<%}); %><%}); %>
    function promiseHandler(promise: any, response: any, next: any) {
        return promise
            .then((data: any) => {
                if (data) {
                    response.json(data);
                } else {
                    response.status(204);
                    response.end();
                }
            })
            .catch((error: any) => {
                // response.status(error.status || 500);
                // response.json(error);
                next(error);
            });
    }

    function getRequestParams(request: any, bodyParamName?: string) {
        const merged: any = {};
        if (bodyParamName) {
            merged[bodyParamName] = request.body;
        }

        for (let attrname in request.params) { merged[attrname] = request.params[attrname]; }
        for (let attrname in request.query) { merged[attrname] = request.query[attrname]; }
        return merged;
    }

    function getValidatedParams(params: any, request: any, bodyParamName?: string): any[] {
        const requestParams = getRequestParams(request, bodyParamName);

        return Object.keys(params).map(key => {
            return validateParam(params[key], requestParams[key], key);
        });
    }
}

function validateParam(typeData: any, value: any, name?: string) {
    if (value === undefined) {
        if (typeData.required) {
            throw new InvalidRequestException(name + ' is a required parameter.');
        } else {
            return undefined;
        }
    }

    switch (typeData.typeName) {
        case 'string':
            return validateString(value, <any>name, typeData.length);
        case 'boolean':
            return validateBool(value, <any>name);
        case 'number':
            return validateNumber(value, <any>name);
        case 'array':
            return validateArray(value, typeData.arrayType, <any>name);
        case 'datetime':
            if (!typeData.required) {
                return null;
            }
            return validateDate(value, <any>name);
        case 'buffer':
            return value;
        default:
            return validateModel(value, typeData.typeName);
    }
}

function validateNumber(numberValue: string, name: string): number {
    const parsedNumber = parseInt(numberValue, 10);
    if (isNaN(parsedNumber)) {
        throw new InvalidRequestException(name + 'should be a valid number.');
    }

    return parsedNumber;
}

function validateString(stringValue: string, name: string, length: number) {
    let str = stringValue.toString();
    if (length >0 && str.length > length) {
        throw new InvalidRequestException(name + 'maximum length of ' + length + ' exceeded.');
    }
    return str;
}

function validateDate(stringValue: string, name: string) {
    if (stringValue !== undefined && stringValue !== null) {
        if (stringValue.trim().length !== 0) {
            let date = new Date(stringValue);
            if (date instanceof Date && isFinite(<any>date)) {
                return date;
            }
        }
    }
    throw new InvalidRequestException(name + 'should be valid date value.');
}

function validateBool(boolValue: any, name: string): boolean {
    if (boolValue === true || boolValue === false) { return boolValue; }
    if (boolValue.toLowerCase() === 'true') { return true; }
    if (boolValue.toLowerCase() === 'false') { return false; }

    throw new InvalidRequestException(name + 'should be valid boolean value.');
}

function validateModel(modelValue: any, typeName: string): any {
    const modelDefinition = models[typeName];

    Object.keys(modelDefinition).forEach((key: string) => {
        const property = modelDefinition[key];
        modelValue[key] = validateParam(property, modelValue[key], key);
    });

    return modelValue;
}

function validateArray(array: any[], arrayType: string, arrayName: string): any[] {
    return array.map(element => validateParam({
        required: true,
        typeName: arrayType,
    }, element));
}

interface Exception extends Error {
    status: number;
}

class InvalidRequestException implements Exception {
    public status = 400;
    public name = 'Invalid Request';

    constructor(public message: string) { }
}
