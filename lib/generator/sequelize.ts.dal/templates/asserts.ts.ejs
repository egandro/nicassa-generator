/* tslint:disable:max-line-length */
////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

import entities = require('./entities');<% if(namespace !== undefined && namespace !== null){ %>

export namespace <%- namespace%> {<% } %>


export class Asserts {
    private static BOOLEAN_TYPE: string = typeof (true);
    private static NUMBER_TYPE: string = typeof (1);
    private static STRING_TYPE: string = typeof ('');
    private static FUNCTION_TYPE: string = typeof (function () { });
    private static DATE_EXPECTED_TYPE: string = 'Date';
    private static BUFFER_EXPECTED_TYPE: string = 'Buffer';
    private static BUFFER_EXISTS: boolean = typeof Buffer !== 'undefined'; // in node exists, in js not, so only validate in node
    private static asserters: { [typeName: string]: (entity: any, allowUndefined?: boolean) => void } = {};

    public static initalize() {
        if (Object.keys(Asserts.asserters).length !== 0) {
            return;
        }<%
entities.forEach(function(entity){%>
        Asserts.asserters['<%-entity.getMappedName('TypeScript')%>'] = Asserts.<%-entity.getMappedName('TypeScript')%>;<%});%>
    }
<%entities.forEach(function(entity){%>
    public static <%-entity.getMappedName('TypeScript')%>(entity: entities.<%
    if(namespace !== undefined && namespace !== null){ %><%- namespace%>.<% }
%><%- entity.getMappedName('TypeScript')%>, allowUndefined?: boolean): void {
        if (entity === undefined || entity === null) {
            if (allowUndefined) {
                return;
            }
            throw new Error('Invalid <%- entity.getMappedName('TypeScript')%> provided. It is \'' + (typeof entity) + '\'.');
        }
        let fieldNames: string[] = Object.keys(entity);
        if (fieldNames.length === 0) {
            throw new Error('Invalid <%- entity.getMappedName('TypeScript')%> provided. It is an empty object.');
        }

        let i: number = fieldNames.length;
        while (i-- > 0) {
            switch (fieldNames[i]) {<%
                entity.columns.forEach(function(column){%>
                case '<%- column.getMappedName("TypeScript")%>': Asserts.assertValidFieldType('<%- entity.getMappedName("TypeScript")%>', '<%- column.getMappedName("TypeScript")%>', entity, '<%- column.getMappedDataType("TypeScript")%>'); break;<%
                });%>
                default:
                    throw new Error('Invalid <%- entity.getMappedName("TypeScript")%> provided. Field \'' + fieldNames[i] + '\' is not supported.')
            }
        }
    }
<%});
%>
    private static assertValidFieldType(pojoName: string, fieldName: string, pojo: any, expectedType: string): void {

        let value: any = pojo[fieldName];
        let actualType: string = typeof value;

        if (value === undefined || value === null) {
            return;
        }

        switch (expectedType) {
            case Asserts.BOOLEAN_TYPE:
                if (actualType !== Asserts.BOOLEAN_TYPE && actualType !== Asserts.NUMBER_TYPE) {
                    err();
                }
                pojo[fieldName] = Boolean(value);
                return;

            case Asserts.NUMBER_TYPE:
                if (actualType === Asserts.NUMBER_TYPE) {
                    return;
                }
                if (actualType === Asserts.STRING_TYPE) {
                    let newValue: number = parseFloat(value);
                    if (isNaN(newValue)) {
                        err();
                    }
                    pojo[fieldName] = newValue;
                }
                return;

            case Asserts.STRING_TYPE:
                if (actualType !== Asserts.STRING_TYPE) {
                    pojo[fieldName] = value.toString();
                }
                return;

            case Asserts.DATE_EXPECTED_TYPE:
                let getTime: Function = value.getTime;
                if (typeof getTime === Asserts.FUNCTION_TYPE) {
                    let timeValue: number = value.getTime();
                    if (isNaN(timeValue)) {
                        err();
                    }
                    if (!(value instanceof Date)) {
                        pojo[fieldName] = new Date(timeValue);
                    }
                    return;
                }

                if (actualType === Asserts.STRING_TYPE) {
                    let newDate: Date = new Date(value);
                    if (!isNaN(newDate.getTime())) {
                        pojo[fieldName] = newDate;
                        return;
                    }
                }
                err();
                return;

            case Asserts.BUFFER_EXPECTED_TYPE:
                if (!Asserts.BUFFER_EXISTS) {
                    return;
                }

                if (!(value instanceof Buffer)) {
                    err();
                }
                return;
        }

        // one pojo of array of array of pojos?
        if (expectedType.length > 3 && expectedType.substr(expectedType.length - 2, 2) === '[]') {
            let individualPojoType: string = expectedType.substr(0, expectedType.length - 6);

            let asserter: Function = Asserts.asserters[individualPojoType];
            if (typeof asserter !== Asserts.FUNCTION_TYPE) {
                err();
            }

            if (isNaN(value.length)) {
                err();
            }
            for (let i = 0; i < value.length; i++) {
                try {
                    asserter(value[i], true);
                } catch (e) {
                    err('Error at index \'' + i + '\': ' + e.message);
                }
            }

            // all instances valid
            return;
        }

        let asserter: Function = Asserts.asserters[expectedType.substr(0, expectedType.length - 4)];
        if (typeof asserter !== Asserts.FUNCTION_TYPE) {
            expectedTypeErr();
        }

        try {
            asserter(value, true);
        } catch (e) {
            err(e.message);
        }

        function err(extraMessage?: string): void {
            let message: string = 'Invalid ' + pojoName + ' provided. Field \'' + fieldName + '\' with value \'' + Asserts.safeValue(value) + '\' is not a valid \'' + expectedType + '\'.';
            if (extraMessage !== undefined) {
                message += ' ' + extraMessage;
            }
            throw new Error(message);
        }

        function expectedTypeErr(): void {
            throw new Error('Cannot validate \'' + pojoName + '\' field \'' + fieldName + '\' since expected type provided \'' + expectedType + '\' is not understood.');
        }
    }

    private static safeValue(value: any): string {
        if (value === undefined || value === null) {
            return typeof value;
        }

        let s: string = value.toString();
        return s.substr(0, 100);
    }


}

Asserts.initalize(); // static constructor

<% if(namespace !== undefined && namespace !== null){ %>
} // namespace <%- namespace%>
<% } %>
