/* tslint:disable:max-line-length */
////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// NOTE: remove the auto generated timestamps fields from
// connection by adding 'define: { timestamps: false }' in the options
////////////////////////////////////////////////////////////////////

import sequelize = require('sequelize');
let Sequelize: sequelize.SequelizeStatic = require('sequelize');

import models = require('./models');
import entities = require('./entities');<% if(namespace !== undefined && namespace !== null){ %>

export namespace <%- namespace%> {<% } %>

export class <%- entityContainerName%>  {
    protected _connection: sequelize.Sequelize;
<%entities.forEach(function(entity){%>
    <%- entity.getMappedName('TypeScriptModel')%>: models.<%
    if(namespace !== undefined && namespace !== null){ %><%- namespace%>.<% }
%><%- entity.getMappedName('TypeScriptModel')%>;<%});
%>

    constructor(connection?: sequelize.Sequelize) {
        this._connection = <any>connection;
    }

    get connection(): sequelize.Sequelize {
        return this._connection;
    }

    set connection(value: sequelize.Sequelize) {
        this.destroyModels();
        this._connection = value;
        this.createModels();
        this.createRelationships();
    }

    connect(database: string, username: string, password: string,
        options?: sequelize.Options): sequelize.Sequelize {
        let con: sequelize.Sequelize = new sequelize(database, username, password, options);
        this.connection = con;
        return con;
    }

    disconnect() {
        if (this.connection != null) {
            this.connection.close();
        }
        this.connection = <any>null;
    }

    protected destroyModels() {<%
entities.forEach(function(entity){%>
        this.<%- entity.getMappedName('TypeScriptModel')%> = <any>null;<%});
%>
    }
    protected createModels() {<%
entities.forEach(function(entity){%>
        this.<%- entity.getMappedName('TypeScriptModel')%> = <any><%
        if(entity.isView){ %> // view <%
        } else { %> // table <%
        } %>
            this.connection.define<models.<%
    if(namespace !== undefined && namespace !== null){ %><%- namespace%>.<% }
%><%- entity.getMappedName('TypeScriptInstance')%>, entities.<%
    if(namespace !== undefined && namespace !== null){ %><%- namespace%>.<% }
%><%- entity.getMappedName('TypeScript')%>>(
                '<%- entity.name%>', {<%
entity.columns.forEach(function(column){%>
                    <%- column.getMappedName('TypeScript')%>: { field: '<%- column.name%>', type: <%- column.getMappedDataType('Sequelize')%>,<%
        if(column.pk){ %> primaryKey: true,<%
        } %><%
        if(column.defaultValue !== undefined &&
           column.defaultValue !== null &&
           column.defaultValue !== ''){ %> defaultValue: <%- column.defaultValue%>,<%
        } %> },<%
});%>
                },
                {
                    freezeTableName: true,
                    classMethods: {
                        load<%- entity.getMappedName('TypeScript')%>: (params: any): Promise<models.<%- entity.getMappedName('TypeScriptInstance')%>> => {
                            let where: { [key: string]: any } = {};
                            if (params !== undefined && params !== null) {<%
                            entity.columns.forEach(function(column){%>
                                if (params['<%- column.getMappedName('TypeScript')%>'] !== undefined) { where['<%- column.name%>'] = params['<%- column.getMappedName('TypeScript')%>']; };<%
                            });%>
                            }
                            return <any>this.<%- entity.getMappedName('TypeScriptModel')%>.find({where: where});
                        },
                        get<%- entity.getMappedName('TypeScript')%>: (params: any): Promise<models.<%- entity.getMappedName('TypeScriptInstance')%>[]> => {
                            let where: { [key: string]: any } = {};
                            if (params !== undefined && params !== null) {<%
                            entity.columns.forEach(function(column){%>
                                if (params['<%- column.getMappedName('TypeScript')%>'] !== undefined) { where['<%- column.name%>'] = params['<%- column.getMappedName('TypeScript')%>']; };<%
                            });%>
                            }
                            return <any>this.<%- entity.getMappedName('TypeScriptModel')%>.findAll({where: where});
                        },
                        toEntity(instance: any): entities.<%- entity.getMappedName('TypeScript')%> {
                            let entity: any = {};
                            if (instance !== undefined && instance !== null) {<%
                            entity.columns.forEach(function(column){%>
                                if (instance['<%- column.getMappedName('TypeScript')%>'] !== undefined) { entity['<%- column.getMappedName('TypeScript')%>'] = instance['<%- column.getMappedName('TypeScript')%>']; };<%
                            });%>
                            }
                            return <entities.<%- entity.getMappedName('TypeScript')%>>entity;
                        },
                        toJson(instance: any): string {
                            let entity: any = {};
                            if (instance !== undefined && instance !== null) {<%
                            entity.columns.forEach(function(column){%>
                                if (instance['<%- column.getMappedName('TypeScript')%>'] !== undefined) { entity['<%- column.getMappedName('TypeScript')%>'] = instance['<%- column.getMappedName('TypeScript')%>']; };<%
                            });%>
                            }
                            let str = JSON.stringify(entity, null, 2);
                            return str;
                        }
                    }
                });<%
            if(!entity.hasPKs){ %>
        this.<%- entity.getMappedName('TypeScriptModel')%>.removeAttribute('id');<%
} %><%});
%>
    }

    protected createRelationships() {<%
relations.forEach(function(relation){%>
        this.<%- relation.table.getMappedName('TypeScriptModel')
                %>.belongsTo(this.<%- relation.destination.table.getMappedName('TypeScriptModel')
                %>, {foreignKey: '<%- relation.source.name
                %>'});
        this.<%- relation.destination.table.getMappedName('TypeScriptModel')
                %>.hasMany(this.<%- relation.table.getMappedName('TypeScriptModel')
                %>, {foreignKey: '<%- relation.destination.name
                %>'});
<%});%>    }
}<% if(namespace !== undefined && namespace !== null){ %>
} // namespace <%- namespace%>
<% } %>
