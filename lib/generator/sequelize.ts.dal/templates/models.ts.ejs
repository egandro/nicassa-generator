/* tslint:disable:max-line-length */
////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Sequelize MODEL Definitions
////////////////////////////////////////////////////////////////////

import sequelize = require('sequelize');<%
if(entities.length>0){ %>
import entities = require('./entities');
<% } %><% if(namespace !== undefined && namespace !== null){ %>
export namespace <%- namespace%> {
<% } %>
<%

if(tables.length>0){ %>
////////////////////////////////////////////////////////////////////
// TABLES
////////////////////////////////////////////////////////////////////
<% } %><%tables.forEach(function(table){%>
export interface <%- table.getMappedName('TypeScriptInstance')%> extends sequelize.Instance<entities.<%
    if(namespace !== undefined && namespace !== null){ %><%- namespace%>.<% }
%><%- table.getMappedName('TypeScript')%>>, entities.<%
    if(namespace !== undefined && namespace !== null){ %><%- namespace%>.<% }
%><%- table.getMappedName('TypeScript')%> { }
export interface <%- table.getMappedName('TypeScriptModel')%> extends sequelize.Model<<%- table.getMappedName('TypeScriptInstance')%>, entities.<%
    if(namespace !== undefined && namespace !== null){ %><%- namespace%>.<% }
%><%- table.getMappedName('TypeScript')%>> {
    load<%- table.getMappedName('TypeScript')%>(params: any): Promise<<%- table.getMappedName('TypeScriptInstance')%>>;
    get<%- table.getMappedName('TypeScript')%>(params: any): Promise<<%- table.getMappedName('TypeScriptInstance')%>[]>;
    toEntity(instance: any): <%- table.getMappedName('TypeScriptInstance')%>;
    toJson(instance: any): string;
}
<%}); %>
<%

if(views.length>0){ %>
////////////////////////////////////////////////////////////////////
// VIEWS
////////////////////////////////////////////////////////////////////
<% } %><%views.forEach(function(view){%>
export interface <%- view.getMappedName('TypeScriptInstance')%> extends sequelize.Instance<entities.<%
    if(namespace !== undefined && namespace !== null){ %><%- namespace%>.<% }
%><%- view.getMappedName('TypeScript')%>>, entities.<%
    if(namespace !== undefined && namespace !== null){ %><%- namespace%>.<% }
%><%- view.getMappedName('TypeScript')%> { }
export interface <%- view.getMappedName('TypeScriptModel')%> extends sequelize.Model<<%- view.getMappedName('TypeScriptInstance')%>, entities.<%
    if(namespace !== undefined && namespace !== null){ %><%- namespace%>.<% }
%><%- view.getMappedName('TypeScript')%>> {
    load<%- view.getMappedName('TypeScript')%>(params: any): Promise<<%- view.getMappedName('TypeScriptInstance')%>>;
    get<%- view.getMappedName('TypeScript')%>(params: any): Promise<<%- view.getMappedName('TypeScriptInstance')%>[]>;
    toEntity(instance: any): <%- view.getMappedName('TypeScript')%>;
    toJson(instance: any): string;
}
<%}); %><% if(namespace !== undefined && namespace !== null){ %>
} // namespace <%- namespace%>
<% } %>
