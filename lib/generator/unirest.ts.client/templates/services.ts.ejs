/* tslint:disable:max-line-length */
////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
////////////////////////////////////////////////////////////////////

let unirest = require('unirest');
import { Configuration } from './configuration';

import {<%
complexTypes.forEach(function(type){%>
    <%- type.type%>,<%}
);%>
} from './entities';
<%controllers.forEach(function(ctrl){
    let needsetBaseParams = false;
    let needbuildPath = false;
    let needbuildQuery = false;%>
export class <%- ctrl.name%>Service {
    private actionUrl: string;
    private proxyUrl: string;
    private timeout: number;
    private strictSSL: boolean;

    constructor(private __configuration: Configuration) {
        this.actionUrl = this.__configuration.url() + '<%- ctrl.path%>';
        this.proxyUrl = this.__configuration.proxyUrl();
        this.timeout = this.__configuration.timeout();
        this.strictSSL = this.__configuration.strictSSL();
    }
<%
ctrl.routes.forEach(function(method){%>
    public <%- method.operationId%> = (<%
        needsetBaseParams = true;
        var p=0;
        var needBody = false;
        var body = '\'\'';
        var resultType = '';
        var resultTypeHttp = '';
        var resultTypeIsPrimitive = true;
        method.parameter.forEach(function(param){

%><%- param.name%><%
    if(param.isMap) {%>
    [key: string]<%
    } else{ if(!param.isRequired) {
        %>?<%}%><%}
    %>: <%- param.getMappedType('TypeScript')
    %><%if(param.isArray) {%>[]<%}%><%
    if(p+1<method.parameter.length) {%>,
        <%}%><%p++;});%>): Promise<<%
        resultType = 'void';
        resultTypeHttp = 'any';
        if(method.response.length>0) {
            var response = method.response[0];
            resultType = response.getMappedType('TypeScript');
            resultTypeIsPrimitive = response.isPrimitive;
            if(response.isArray) {
                resultType += "[]";
            }
            resultTypeHttp = resultType;
        }
    %><%- resultType %>> => {<%
    if(method.response.length>1) {%>
        /* warning <%- method.response.length %> response types found -
           currently only using the very first one
           idea: return a <%- ctrl.name%>Service_<%- method.operationId%>_Type { [key: string] :  typeA | typeB | typeC }

           This currently may leads to non compilable code, because unused types are referenced...
         */<%
    }%><%if( ['post', 'put', 'patch'].indexOf(method.verb)>-1) {
            var param = method.getBodyParameter();
            needBody = true;
            if(param != null) { body = param.name; } %>
        const __body: any = <%- body; %>;<%}
if(method.hasParameterType('path')) {
        %>
        const __url = this.actionUrl + this.__buildPath('<%- method.pathNoSlash()%>'<%
            var buildPathParams = '';
            method.parameter.forEach(function(pathParam){
                if(pathParam.in == 'path') {
                    buildPathParams += ', \'' + pathParam.name + '\'';
                    buildPathParams += ', ' + pathParam.name;
                    needbuildPath = true;
                }
            });
            if(buildPathParams !='') {%><%- buildPathParams; %><%}
%>);<%} else {%>
        const __url = this.actionUrl + '<%- method.pathNoSlash()%>';<%
}%>
        const __request = unirest.<%- method.verb%>(__url);
        this.__setBaseParams(__request);
<%
        if(method.hasParameterType('query')) {%>
        url = this.__buildQuery(url<%
            var buildQueryParams = '';
            method.parameter.forEach(function(queryParam){
                if(queryParam.in == 'query') {
                    buildQueryParams += ', \'' + queryParam.name + '\'';
                    buildQueryParams += ', ' + queryParam.name;
                    needbuildQuery = true;
                }
            });
            %><%- buildQueryParams; %>);%><%
}%><%
        if(method.hasParameterType('header')) {
            method.parameter.forEach(function(headerParam){
                if(headerParam.in == 'header') {%>
        __request.header('<%- headerParam.name%>', <%- headerParam.name%> ? encodeURI(<%- headerParam.name%>) : '');
                <%}});%><%
}%><%   if(method.security == 'jwt') {%>
        __request.header('x-access-token', this.__configuration.token);
                %><%
}%>
        const __promise = new Promise<<%- resultTypeHttp %>>((__resolve: any, __reject: any) => {
            <%if(needBody) {%>
            __request.send(JSON.stringify(__body));<%
            }%>
            __request.end((__response: any) => {
                if (__response.status >= 400) {
                    __reject(new Error(__response.error));
                    return;
                }
                if (__response.status === undefined || __response.status === null) {
                    __reject(new Error(__response.error));
                    return;
                }<%if(resultTypeIsPrimitive){%>
                __resolve(__response.body);<%
               }else{%>
                let __obj: any;
                try{
                    __obj = JSON.parse(__response.body);
                } catch (__err) {
                    this.__configuration.handleError(__err);
                    __reject(new Error(__response.error));
                    return;
                }
                __resolve(__obj);<%
                }%>
            });
        });
        return __promise;
    }

<%});%><%if(needbuildQuery) {%>
    private __buildQuery(url: any, ...params: any[]): string {
        if (params === undefined || params === null || params.length === 0) {
            return url;
        }
        let delimiter = '?';
        for (let i = 0; i < params.length; i += 2) {
            const key: string = params[i];
            let value: any = params[i+1];

            key = encodeURI(key);

            if(value == null || value === undefined) {
                value = '';
            }
            value = encodeURI(value);

            url += delimter + key + '=' + value;

            const arr = url.split('{' + key + '}');
            url = arr[0] + value + arr[1];

            delimiter = '&';
        }
        return url;
    }<%
}%><%if(needbuildPath) {%>

    private __buildPath(url: any, ...params: any[]): string {
        if (params === undefined || params === null || params.length === 0) {
            return url;
        }
        for (let i = 0; i < params.length; i += 2) {
            const key: string = params[i];
            let value: any = params[i + 1];

            if (value == null || value === undefined) {
                value = '';
            }
            value = encodeURI(value);

            const arr = url.split('{' + key + '}');
            url = arr[0] + value + arr[1];
        }
        return url;
    }<%
}%><%if(needsetBaseParams) {%>

    private __setBaseParams(unirest: any, jwtSecurity?: boolean): any {
        if( unirest === undefined || unirest === null) {
            return unirest;
        }

        let options: any = {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "Accept-Encoding": "gzip, deflate, compress"
        };

        if(this.__configuration.customHeaders != null ||
           this.__configuration.customHeaders !== undefined) {
            for (const key in this.__configuration.customHeaders) {
                if (this.__configuration.customHeaders.hasOwnProperty(key)) {
                    let value: string = this.__configuration.customHeaders[key];
                    if (value == null || value === undefined) {
                        value = encodeURI(value);
                    }
                    options[key] = value;
                }
            }
        }

        unirest = unirest.headers(options);

        if(this.timeout !== undefined && this.timeout !== null && this.timeout>0) {
            unirest = unirest.timeout(this.timeout);
        }

        if(this.proxyUrl !== undefined && this.proxyUrl !== null ) {
            unirest = unirest.proxy(this.proxyUrl);
        }

        if(this.timeout !== undefined && this.strictSSL !== null && !this.strictSSL) {
            unirest = unirest.strictSSL(false);
        }

        return unirest;
    }<%
}%>
}
<%});%>
